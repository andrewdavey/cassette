@{
    ViewBag.Title = "Cassette | Benefits";
    ViewBag.Description = "Improve your website's Y-Slow score, enjoy CoffeeScript and LESS support, choose how to organize your application, enjoy easy debugging... and so much more!";
    ViewBag.Section = "benefits";
}

<div class="main">
    
    <h1>Benefits</h1>

    @Html.Partial("_Share")

    <div class="content">
        
        <h2>Improve your website&rsquo;s Y-Slow score</h2>
        <p>A faster website means happier users and can even <a href="http://blog.kissmetrics.com/loading-time/?wide=1" target="_blank">improve 
        your business&rsquo;s bottom line</a>. Cassette <strong>combines</strong> and 
        <strong>minifies</strong> your assets into bundles. This results in fewer HTTP requests, <strong>reducing page load time.</strong></p>
        <p>Cassette bundles are served using the right HTTP caching headers and <strong>compressed</strong> to ensure optimal client download performance.</p> 
        <p>Bundle URLs include a hash of the contents, so a <strong>changed file results in a new URL</strong>. Your users will never have to clear their 
        browser cache again.</p>
        
        <h2>Organize your application, your way</h2>
        <p>Cassette&rsquo;s <strong>flexible configuration system</strong> lets you decide how to structure your assets. Use the simple, code-based API 
        to define bundles by convention.</p>
        <p>The bundle processing pipeline is <strong>fully customizable</strong>. It provides full control over how bundles are combined, minified and rendered.</p>

        <h2>Create cleaner code, faster</h2>
        <p>Use your favourite awesome languages - <strong>CoffeeScript</strong>, <strong>LESS</strong> and <strong>Sass</strong>. Cassette will compile these 
        into JavaScript and CSS.</p>

        <h2><span title="That's right!">Automagic</span> asset ordering</h2>
        <p>Don&rsquo;t waste time maintaining that ever-growing file of scripts listed in the right order. Be explicit about each file's dependencies 
        with handy reference comments, and let Cassette <strong>determine the correct order for you</strong>.</p>
        <p>Alternatively, Cassette does offer a simple file format to explicitly order assets.</p>

        <h2>Simple &ldquo;in-page&rdquo; API</h2>
        <p>Reference the bundles your page view or partial requires using the <strong>simple Bundles helper</strong> class. Then tell Cassette where to render the HTML. 
        It will generate all the script and link elements for you.</p>
        <p>If you reference one bundle that requires another, Cassette knows to include both bundles in the generated HTML.</p>

        <h2>Easy Debugging &#38; Production Performance</h2>
        <p><strong>Debug your original JavaScript files</strong> - much easier than trying to debug a minified monster! Proper filenames and line numbers let you find and fix 
        problems faster. In debug-mode Cassette puts each source asset into the page individually.</p>
        <p>With a single configuration change for production deployment, Cassette will generate the optimized bundle includes instead. This requires 
        absolutely <strong>no manual changes</strong> to your page source.</p>

        <h2>Manageable HTML Templates</h2>
        <p>Embedding HTML templates directly within a page is messy. Keeping each template in its own file makes projects much <strong>simpler to maintain</strong>. 
        Let Cassette handle the embedding for you.</p>
        <p>Cassette can <strong>pre-compile</strong> the HTML templates into JavaScript for even faster client-side load times.</p>

    </div>
</div>
