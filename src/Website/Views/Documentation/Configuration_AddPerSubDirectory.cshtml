@{
    ViewBag.Title = "Cassette | Add Per Sub-Directory";
    ViewBag.Description = "How to add bundles quickly when you've got lots of directories.";
}

<h1>Add Per Sub-Directory</h1>

<p>In a large application it's good to separate related assets into directories. Each directory can then be a Cassette bundle.</p>

<p>Here's an example directory structure:</p>

<pre>Scripts/
- Dashboard/
  - header.js
  - popup.js
- Widgets/
  - datepicker.js
  - autocomplete.js
- jquery.js
- underscore.js</pre>

<p>We can turn this into three bundles using the <code>AddPerSubDirectory</code> method.</p>

<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles, <span class="code-type">CassetteSettings</span> settings)
    {
        bundles.AddPerSubDirectory&lt;<code class="code-type">ScriptBundle</code>&gt;(<span class="string">"Scripts"</span>);
    }
}</code></pre>

<p>A bundle is added for each immediate sub-directory of the given path.</p>

<p>Also, a bundle is created for just top-level assets of the path. This is useful because many third-party nuget packages
drop their scripts into ~/Scripts. So it's sensible to move your own scripts into sub-directories.</p>

<h2>FileSearch</h2>
<p>To control which assets are included in the bundle, use an overload of the AddPerSubDirectory method.</p>

<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles, <span class="code-type">CassetteSettings</span> settings)
    {
        bundles.AddPerSubDirectory&lt;<span class="code-type">ScriptBundle</span>&gt;(<span class="string">"Scripts"</span>, <span class="keyword">new</span> <span class="code-type">FileSearch</span>
        {
            Pattern = <span class="string">"*.js;*.coffee"</span>,
            SearchOption = <span class="code-type">SearchOption</span>.AllDirectories, <span class="comment">// The default</span>
            Exclude = <span class="keyword">new</span> <span class="code-type">Regex</span>(<span class="string">"-vsdoc\\.js$"</span>) <span class="comment">// The default</span>
        });
    }
}</code></pre>

<h2>Customizing bundles</h2>
<p>The <code>Bundle</code> object created by Cassette can be customized by providing an action delegate.</p>
<p>This is useful for changing the pipeline used to process the bundle.</p>

<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles, <span class="code-type">CassetteSettings</span> settings)
    {
        bundles.AddPerSubDirectory&lt;<span class="code-type">ScriptBundle</span>&gt;(
            <span class="string">"Scripts"</span>,
            bundle => bundle.PageLocation = <span class="string">"body"</span>
        );
    }
}</code></pre>