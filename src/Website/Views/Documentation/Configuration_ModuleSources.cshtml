<h2>Module sources</h2>
<p>Tell Cassette what asset modules your application has by adding "module sources"
to the <code>ModuleConfiguration</code> object passed to your <code>Configure</code> method.</p>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">ModuleConfiguration</span> moduleConfiguration, <span class="code-type">ICassetteApplication</span> application)
{
    moduleConfiguration.Add(
        <span class="comment">// module sources here...</span>
    );
}</code></pre>

<h3>File system module sources</h3>
<p>A file system module source creates modules from directories. They say which assets to include using file extension matching.</p>
<p>There are three file system module source types:</p>
<ul>
    <li><a><a href="@Url.DocumentationUrl("configuration/persubdirectorysource")">PerSubDirectorySource</a></a></li>
    <li><a><a href="@Url.DocumentationUrl("configuration/directorysource")">DirectorySource</a></a></li>
    <li><a><a href="@Url.DocumentationUrl("configuration/perfilesource")">PerFileSource</a></a></li>
</ul>
<p>Here's a quick example. See the previous links for more details.</p>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">ModuleConfiguration</span> moduleConfiguration, <span class="code-type">ICassetteApplication</span> application)
{
    moduleConfiguration.Add(
        <span class="keyword">new</span> <span class="code-type">DirectorySource</span>&lt;<span class="code-type">StylesheetModule</span>&gt;(<span class="string">"Content"</span>)
        {
            FilePattern = <span class="string">"*.css"</span>
        }
    );
}</code></pre>
<p>If you do not add any modules sources then Cassette will use the <code>PerFileSource</code>.
This treats each asset file as a seperate module. This is not ideal for production, so it's recommended you
spend some time grouping assets into modules.</p>

<h3>External modules</h3>
<p>An external URL, such as a file hosted on a <abbr title="Content Delivery Network">CDN</abbr>, can be treated as a module.
Cassette can then manage references to the module and generate the HTML to include it in a page.</p>
<p>External script and stylesheet modules can be added to the configuration. Here's an example that adds an external
script module and provides a friendly name:</p>
<pre><code>moduleConfiguration.Add(
    <span class="keyword">new</span> <span class="code-type">ExternalScriptModule</span>(<span class="string">"twitter"</span>, <span class="string">"http://platform.twitter.com/widgets.js"</span>)
);</code></pre>
<p>Pages and assets can now reference this module by name. For example:</p>
<pre><code><span class="code-tag">@@{</span> <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"twitter"</span>); <span class="code-tag">}</span></code></pre>
<p>and:</p>
<pre><code><span class="comment">/// &lt;reference path="~/twitter"/&gt;</span></code></pre>
<p>The friendly name is optional, but probably nicer than repeating the URL everywhere in your application.</p>
<p>Read more about <a href="@Url.DocumentationUrl("scripts/external-modules")">External Script Modules</a>
and  <a href="@Url.DocumentationUrl("stylesheets/external-modules")">External Stylesheet Modules</a></p>