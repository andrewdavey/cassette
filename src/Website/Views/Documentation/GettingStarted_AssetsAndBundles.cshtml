@{
    ViewBag.Title = "Cassette | Assets and Bundles";
    ViewBag.Description = "How to use and configure assets and bundles in Cassette.";
}

<h1>Assets and Bundles</h1>
<p>
An <em>asset</em> is any source file used in the web browser. In Cassette this means JavaScript, stylesheets and HTML templates.
</p>
<p>
A <em>bundle</em> is a group of assets that make up a single logical resource. Cassette lets you keep
each asset separate to make debugging easy. Then in production mode, Cassette will concatenate the files
together and compress them.
</p>
<p>
Out of the box, Cassette runs in a very simple mode where each asset is treated separately.
However, referencing many separate assets in production is bad for performance.
So let's configure Cassette to combine assets into bundles.
</p>

<h2>Configuration</h2>
<p>The <code>Cassette.Web</code> nuget package adds a file to your project called <code>CassetteConfiguration.cs</code>. 
The class in that file is used to configure Cassette.</p>
<pre><code><span class="keyword">public class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles, <span class="code-type">CassetteSettings</span> settings)
    {
        <span class="comment">// ... configure Cassette here ...</span>
    }
}</code></pre>

<p>
Bundles are added to the <code>BundleCollection</code> using <code>Add</code> methods. These methods
usually require a generic type parameter to specify the type of bundle being added.
</p>
<p>Here's a sample configuration:</p>
<pre><code><span class="keyword">public class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles, <span class="code-type">CassetteSettings</span> settings)
    {
        <span class="comment">// Add a stylesheet bundle containing all the CSS files in ~/Content</span>
        bundles.Add&lt;<span class="code-type">StylesheetBundle</span>&gt;("Content");
        <span class="comment">// Add a script bundle for each sub-directory of ~/Scripts</span>
        bundles.AddPerSubDirectory&lt;<span class="code-type">ScriptBundle</span>&gt;("Scripts");
    }
}</code></pre>

<p>
Keep in mind that a bundle is a <em>unit of deployment</em>. 
If any asset in a bundle changes, then the entire bundle has to be downloaded again by web browsers.
So perhaps group shared code into a bundle and put page scripts into their own bundles.
</p>

<h2>Referencing bundles</h2>
<p>When each asset was treated separately our view pages had to reference each file. For example:</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Bundles</span>.Reference(<span class="string">"scripts/dashboard/index.js"</span>);
    <span class="code-type">Bundles</span>.Reference(<span class="string">"scripts/dashboard/user.js"</span>);
    <span class="code-type">Bundles</span>.Reference(<span class="string">"scripts/dashboard/other.js"</span>);
<span class="code-tag">}</span>
</code></pre>
<p>This can be simplified to a single reference to the bundle directory:</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Bundles</span>.Reference(<span class="string">"scripts/dashboard"</span>);
<span class="code-tag">}</span>
</code></pre>
<p>Please note: Referencing a specific asset will still work, however this will also include <strong>all</strong> the assets
in the bundle. Bundles are "all or nothing".</p>

<p>This also applies to reference within assets. For example, an asset in one bundle can reference another bundle.</p>
<pre><code><span class="comment">/// &lt;reference path="~/scripts/lib" /></span>

<span class="comment">// jQuery is in the 'lib' bundle, so we can now use it in this file.</span>
jQuery(document).ready(function() {
    ...
});</code></pre>
<p>However, you will lose Visual Studio IntelliSense when referencing like this.</p>