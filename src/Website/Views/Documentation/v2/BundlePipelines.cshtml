@{
    ViewBag.Title = "Bundle pipelines";
    ViewBag.Description = "Bundle pipelines process bundles by performing steps such as parsing reference comments, sorting assets, minification, etc.";
}

<h1>Bundle pipelines</h1>

<p>
    Each bundle is assigned a pipeline that is used the process to bundle.
    A bundle pipeline is a list of steps. These steps perform tasks such as 
    parsing reference comments, sorting assets, minification, etc.
</p>

<p>
    Cassette plug-ins and your application are able to customize pipelines.
    For example, the <code>Cassette.CoffeeScript</code> will insert a step into
    <code>ScriptPipeline</code> that compiles <code>.coffee</code> files.
</p>

<h2>Default bundle pipelines</h2>
<p>
    Cassette provides default bundle pipelines for each type of bundle.
    In order to customize pipelines it is useful to know the order of the 
    predefined steps.
</p>

<h3>Script Pipeline</h3>
<pre><code>AssignScriptRenderer
ParseJavaScriptReferences
SortAssetsByDependency
AssignHash
ConcatenateAssets (if not debug mode)
MinifyAssets (if not debug mode)</code></pre>

<h3>Stylesheet Pipeline</h3>
<pre><code>AssignStylesheetRenderer
ParseCssReferences 
ExpandCssUrls
SortAssetsByDependency
AssignHash
ConcatenateAssets (if not debug mode)
MinifyAssets (if not debug mode)</code></pre>

<h3>Html Template Pipeline</h3>
<pre><code>AssignHtmlTemplateRenderer
ParseHtmlTemplateReferences
WrapHtmlTemplatesInScriptElements
AssignHash
ConcatenateAssets</code></pre>


<h2>Modifying bundle pipelines</h2>

<p>
    Cassette provides the <code>Cassette.BundleProcessing.IBundlePipelineModifier&lt;T&gt;</code> interface.
</p>

<pre><code>public interface IBundlePipelineModifier&lt;T&gt; where T : Bundle
{
    IBundlePipeline&lt;T&gt; Modify(IBundlePipeline&lt;T&gt; pipeline);
}</code></pre>

<p>
    During application start-up, Cassette will scan for public classes that implement this interface.
    When a bundle pipeline is created, Cassette will pass it to each bundle modifier's <code>Modify</code> method.
    The modifier can alter the pipeline directly and/or return a new pipeline.
</p>

<h3>Example bundle pipeline modifier</h3>
<p>
    The <code>type</code> attribute on HTML5 <code>&lt;script&gt;</code> elements is optional.
    So let's modify the pipeline to add a step that removes the <code>type</code> attribute.
</p>
<p>
    First we need to implement a bundle processor that removes the attribute.
</p>
<pre><code>public class RemoveScriptTypeAttribute : IBundleProcessor&lt;ScriptBundle&gt;
{
    public void Process(ScriptBundle bundle)
    {
        bundle.HtmlAttributes.Remove("type");
    }
}</code></pre>

<p>Next we insert this processor step into the pipeline.</p>

<pre><code>public class InsertIntoPipelineRemoveScriptTypeAttribute : IBundlePipelineModifier&lt;ScriptBundle&gt;
{
    public IBundlePipeline&lt;T&gt; Modify(IBundlePipeline&lt;T&gt; pipeline)
    {
        // Insert at the beginning of the pipeline (index 0).
        pipeline.Insert&lt;RemoveScriptTypeAttribute&gt;(0);
        return pipeline;
    }
}</code></pre>

<p>
    We're using an overload of the <code>Insert</code> method that uses the Cassette IoC container
    to create the given bundle processor type. This is useful when the processor has dependencies
    passed in via its constructor.
</p>

<p>
    That's it. Cassette will now use the modifier to modify the <code>ScriptPipeline</code>
    instances it creates.
</p>

<p>
    If your bundle processor needs to appear before or after a particular existing step in 
    the pipeline, then use the <code>pipeline.IndexOf&lt;StepTypeHere&gt;()</code> method
    to get the index of the existing step.
</p>
    
