@{
    ViewBag.Title = "Cassette | Stylesheets";
}

<h1>Stylesheets</h1>
<p>
Cassette encourages you to break up monolithic stylesheets into a collection of manageable files.
This makes them easier to maintain.
</p>
<p>The order of these files still matters. There are two ways to tell Cassette about the dependencies. 
It will then sort them correctly for you.</p>
<h2>Reference Comments</h2>
<p>Use comments at the top of a CSS file to reference other CSS files. For example:</p>
<pre><code><span class="comment">/*
@@reference "reset.css";
@@reference "fonts.css";
*/</span>
<span class="tag">body</span> {
    ...
}</code></pre>
<p class="minor">Note that @@import was not chosen because that is designed for browser-side evaluation.</p>

<h2>Bundle Descriptor File</h2>
<p>If you'd rather not use reference comments, then this is the alternative.</p>
<p>Create a file called <code>bundle.txt</code> in the same directory as your stylesheets.</p>
<p>List each CSS file name, relative to the directory. For example:</p>
<pre><code>reset.css
fonts.css
main.css
footer.css</code></pre>

<h2>Production Mode</h2>
<p>
When your application is in production mode, the assets of each stylesheet bundle
are concatenated and minified. By default, Cassette uses the Microsoft Ajax CSS Minifier.
</p>

<h2>Image URLs</h2>
<p>Image URLs in the CSS are rewritten. For example, a file <code>~/styles/main.css</code>, with the content:</p>
<pre><code>body { background-image: url(img/bg.jpg); }</code></pre>
<p>is transformed into:</p>
<pre><code>body { background-image: url(/cassette.axd/file/styles/img/bg-25cb72e61bd5ag2.jpg);</code></pre>
<p>This ensures that the URL is domain absolute and not relative to the CSS file. This matters because the CSS file itself
is served from a different URL in production.</p>
<p>In addition, the image file hash is included in the URL. So if the image changes in future, the URL will also change.
This ensures clients never see an out-of-date version of the image.</p>
<p>Cassette uses a custom HTTP handler to serve the image. This handler sends caching headers with the image to make browsers
aggresively cache it.</p>