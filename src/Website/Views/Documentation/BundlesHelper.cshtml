@{
    ViewBag.Title = "Cassette | Bundles Helper";
}


<h1>Bundles Helper</h1>
<p>In views, use the <code>Cassette.Views.Bundles</code> helper class to reference bundles and render the required HTML.</p>

<table>
    <tr>
        <td><code>Bundles.Reference(path)</code></td>
        <td>Adds a reference to bundle. The path can be to a bundle or one of its assets. It is relative to the application root, not the page.</td>
   </tr>
   <tr>
        <td><code>Bundles.RenderScripts()</code></td>
        <td>Returns <code>&lt;script&gt;</code> elements for the referenced scripts.</td>
   </tr>
   <tr>
        <td><code>Bundles.RenderStylesheets()</code></td>
        <td>Returns <code>&lt;link&gt;</code> elements for the referenced stylesheets.</td>
   </tr>
   <tr>
        <td><code>Bundles.RenderHtmlTemplates()</code></td>
        <td>Returns the referenced HTML templates within special <code>&lt;script&gt;</code> elements.</td>
    </tr>
    <tr>
        <td><code>Bundles.Url(bundlePath)</code></td>
        <td>Returns the Cassette URL of the bundle.</td>
    </tr>
</table>

<h2>Ad-hoc URL References</h2>
<p>References to URLs can also be added. Cassette will generate the relevant HTML along with the other bundles.</p>
<pre><code>@@{
    Bundles.Reference("http://www.example.com/some-resource.js");
}</code></pre>

<h2>Page Data Scripts</h2>
<p>Passing data into a page for use by JavaScript is easy using the <code>AddPageData</code> method.</p>
<pre><code>@@{
    Bundles.AddPageData("globalData", new { username = User.Identity.Name });
}</code></pre>
<p>This will add a <code>&lt;script&gt;</code> block to the page that creates a global variable containing the JSON serialized data.</p>

<h2>Page Locations</h2>
<p>Bundles can have an optional <code>PageLocation</code> assigned. This string allows certain bundles to be rendered
in different parts of the page. For example, some scripts belong in the &lt;head&gt; and some just before &lt;/body&gt;.</p>
<p>Use overloads of the <code>Render*</code> methods to specify the page location being rendered.</p>

<pre><code>@@Bundles.RenderScripts("body")</code></pre>

<h2>Inline Scripts</h2>
<p>Ad-hoc inline page scripts can be managed by using the <code>AddInlineScript</code> method.</p>
<pre><code>@@{
    var message = "Hello World!";
    Bundles.AddInlineScript(@@&lt;text&gt;
      alert('@@message');
    &lt;/text&gt;);
}</code></pre>
<p>This will add a <code>&lt;script&gt;</code> block to the page that displays a whitty message to visitors.</p>