@{
    ViewBag.Title = "External script modules";
}
<h2>External script modules</h2>
<p>
You may want to reference an external script URL in multiple pages. Repeating the URL in each page is not ideal. If you ever need to change
it you'll have to search through all the pages.
</p>
<p>
Cassette supports the definition of external script modules at the application level. You can then reference them by a short, fixed, name.
In addition you can specify a fallback URL if, for example, a CDN fails.
</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">ModuleConfiguration</span> moduleConfiguration, <span class="code-type">ICassetteApplication</span> application)
    {
        modules.Add(
            <span class="keyword">new</span> <span class="code-type">ExternalScriptModule</span>(<span class="string">"twitter"</span>, <span class="string">"http://platform.twitter.com/widgets.js"</span>)
            {
                Location = <span class="string">"body"</span> <span class="comment">// Module render location can be set here if required.</span>
            },
            <span class="keyword">new</span> <span class="code-type">ExternalScriptModule</span>(
                <span class="string">"jquery"</span>,
                <span class="comment">// Protocol relative URL are supported to work with HTTPS pages.</span>
                <span class="string">"//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"</span>,
                <span class="string">"!window.jQuery"</span>, <span class="comment">// JavaScript fallback condition expression</span>
                <span class="comment">// When condition is true, this fallback is dynamically added to the page.</span>
                <span class="string">"/fallback/jquery.js"</span>
            )
        );
    }
}</code></pre>
<p>Now in view pages, these external scripts can be referenced by name.</p>
<pre><code><span class="code-tag">@@{</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"jquery"</span>);
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"twitter"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
...
</code></pre>