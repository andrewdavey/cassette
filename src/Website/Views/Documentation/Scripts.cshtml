<h1>Scripts</h1>
<p>
To correctly sort your script files, Cassette looks for XML-style reference comments.
(These are what Visual Studio uses to give you intellisense.) The idea is that if File-B references File-A
then File-A is included the HTML before File-B, because File-B depends on File-A.
</p>
<p>Here is an example JavaScript file with two references:</p>
<pre><code><span class="comment">/// &lt;reference path="tools.js"/&gt;
/// &lt;reference path="example.js"/&gt;</span>

<span class="keyword">function</span> test() {
    return tools.otherFunction();
}
</code></pre>

<p>The path is relative to the current file. So <code>path="tools.js"</code> will look for a file called <code>tools.js</code> in the same directory as the file making the reference.</p>

<p>A script can also reference a file in another module. For example:</p>

<pre><code><span class="comment">/// &lt;reference path="../libs/jquery.js"/&gt;</span></code></pre>

<p>Alternatively, the path can be "absolute" from the application's root directory.</p>

<pre><code><span class="comment">/// &lt;reference path="~/scripts/libs/jquery.js"/&gt;</span></code></pre>

<h3>Module Referencing Shortcut</h3>
<p>
You can reference an entire module, rather than a specific file from it. Just set the reference path to be the module's directory. For example:
</p>
<pre><code><span class="comment">/// &lt;reference path="~/scripts/lib"/&gt;</span></code></pre>

<h2>Using scripts in-page</h2>
<p>
Use the <code>Assets.Scripts</code> helper in your view pages to reference. Paths are always relative to the application root directory.
</p>
<pre><code><span class="code-tag">@@{</span>
  <span class="comment">// Reference path can be to a specific file</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/app/page.js"</span>);
  <span class="comment">// Or it can just be a module directory</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/other"</span>);
  <span class="comment">// An external URL can also be referenced</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"http://platform.twitter.com/widgets.js"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">head</span><span class="close-tag">&gt;</span>
  <span class="open-tag">&lt;</span><span class="tag">title</span><span class="close-tag">&gt;</span>Web App<span class="open-tag">&lt;/</span><span class="tag">title</span><span class="close-tag">&gt;</span>
  <span class="code-tag">@@</span><span class="code-type">Assets</span>.Scripts.Render()
<span class="open-tag">&lt;/</span><span class="tag">head</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">body</span><span class="close-tag">&gt;</span>
  ...
<span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></code></pre>

<p class="minor">The <code>Assets</code> class is defined in the <code>Cassette.UI</code> namespace. So make sure you've referenced this in <code>~\Views\Web.config</code>. The Cassette.Web nuget package does this for you.</p>
<p>The call to <code>Assets.Scripts.Render()</code> generates <code>&lt;script&gt;</code> tags to include the referenced scripts.</p>

<h2>Module render locations</h2>
<p>
Not all HTML <code>&lt;script&gt;</code> tags have to be generated in the same place. For example, some scripts only progressively
enhance the page and can be left until the very end to be included. Others may need to be in the <code>&lt;head&gt;</code>.
</p>
<p>The helper methods are overloaded to accept a <code>location</code> argument.</p>
<pre><code><span class="code-tag">@@{</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/app"</span>);
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"http://platform.twitter.com/widgets.js"</span>, <span class="string">"body"</span>);
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"https://apis.google.com/js/plusone.js"</span>, <span class="string">"body"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">head</span><span class="close-tag">&gt;</span>
  <span class="open-tag">&lt;</span><span class="tag">title</span><span class="close-tag">&gt;</span>Web App<span class="open-tag">&lt;/</span><span class="tag">title</span><span class="close-tag">&gt;</span>
  <span class="code-tag">@@</span><span class="code-type">Assets</span>.Scripts.Render()
<span class="open-tag">&lt;/</span><span class="tag">head</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">body</span><span class="close-tag">&gt;</span>
  ...
  <span class="code-tag">@@</span><span class="code-type">Assets</span>.Scripts.Render(<span class="string">"body"</span>)
<span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></code></pre>
<p>
When <code>location</code> not given it defaults to the empty string. 
So in the above example, the Scripts/app scripts will be in <code>&lt;head&gt;</code>.
The twitter and Google scripts are rendered just before <code>&lt;/body&gt;</code>
</p>

<h2>Configuring external scripts</h2>
<p>
You may want to reference an external script URL in multiple pages. Repeating the URL in each page is not ideal. If you ever need to change
it you'll have to search through all the pages.
</p>
<p>
Cassette supports the definition of external script modules at the application level. You can then reference them by a short, fixed, name.
In addition you can specify a fallback URL if, for example, a CDN fails.
</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">ICassetteConfiguration</span>
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">ModuleConfiguration</span> modules)
    {
        modules.Add(
            <span class="keyword">new</span> <span class="code-type">ExternalScriptModule</span>(<span class="string">"twitter"</span>, <span class="string">"http://platform.twitter.com/widgets.js"</span>)
            {
                Location = <span class="string">"body"</span> <span class="comment">// Module render location can be set here if required.</span>
            },
            <span class="keyword">new</span> <span class="code-type">ExternalScriptModule</span>(
                <span class="string">"jquery"</span>,
                <span class="comment">// Protocol relative URL are supported to work with HTTPS pages.</span>
                <span class="string">"//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"</span>,
                <span class="string">"!window.jQuery"</span>, <span class="comment">// JavaScript fallback condition expression</span>
                <span class="comment">// When condition is true, this fallback is dynamically added to the page.</span>
                <span class="string">"/fallback/jquery.js"</span>
            )
        );
    }
}</code></pre>
<p>Now in view pages, these external scripts can be referenced by name.</p>
<pre><code><span class="code-tag">@@{</span>
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"jquery"</span>);
  <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"twitter"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
...
</code></pre>