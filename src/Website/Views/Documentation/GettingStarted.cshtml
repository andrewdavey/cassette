<h2>Getting Started</h2>
<pre><code>PM&gt; Install-Package Cassette.Web</code></pre>
<p>
Add the <code>Cassette.Web</code> nuget package to your ASP.NET 4.0 application.
Cassette works with both WebForms and MVC projects. If using WebForms, please read the <a href="@Url.DocumentationUrl("getting-started/webforms")">WebForms Set Up</a>
</p>
<p>The examples here will use Razor views, but aspx, spark, etc, will also work.</p>

<p>
In your view page, reference scripts and stylesheets using Cassette's <code>Assets</code> helper class.
</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/jquery.js"</span>);
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/page.js"</span>);
    <span class="code-type">Assets</span>.Stylesheets.Reference(<span class="string">"Styles/page.css"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
...</code></pre>
<p class="minor">Reference paths are relative to the application root directory, not the page.</p>

<p>
Next, we need say where to render the HTML required to include these scripts and stylesheets in the page.
Use the <code>Render</code> methods to insert the HTML into the page.
</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/jquery.js"</span>);
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/page.js"</span>);
    <span class="code-type">Assets</span>.Stylesheets.Reference(<span class="string">"Styles/page.css"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">head</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">title</span><span class="close-tag">&gt;</span>Web App<span class="open-tag">&lt;/</span><span class="tag">title</span><span class="close-tag">&gt;</span>
    <span class="code-tag">@@</span><span class="razor-expression"><span class="code-type">Assets</span>.Stylesheets.Render()</span>
<span class="open-tag">&lt;/</span><span class="tag">head</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">body</span><span class="close-tag">&gt;</span>
    ...
    <span class="code-tag">@@</span><span class="razor-expression"><span class="code-type">Assets</span>.Scripts.Render()</span>
<span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></code></pre>

<h3>Debug vs Production mode</h3>
<p>Run your application and try toggling <code>debug</code> mode in <code>Web.config</code>.</p>
<pre><code><span class="open-tag">&lt;</span><span class="tag">configuration</span><span class="close-tag">&gt;</span>
    ...
    <span class="open-tag">&lt;</span><span class="tag">system.web</span><span class="close-tag">&gt;</span>
        <span class="open-tag">&lt;</span><span class="tag">compilation <span class="attribute">debug</span><span class="attribute-value">="false"</span></span><span class="close-tag">&gt;</span>
            ...
        <span class="open-tag">&lt;/</span><span class="tag">compilation</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;/</span><span class="tag">system.web</span><span class="close-tag">&gt;</span>
    ...
<span class="open-tag">&lt;/</span><span class="tag">configuration</span><span class="close-tag">&gt;</span>
</code></pre>
<p>When debug is true, Cassette will use debug-friendly assets.</p>
<p>When debug is false, Cassette will use minified, compressed, cached, versioned assets.</p>

<h3>Master/layout Pages</h3>
<p>
If you are using master/layout pages then references can be in the content page and render calls in the master/layout.
You can even reference assets from a partial view and they will be rendered in the layout.
</p>
<p>For example, here's a layout page that declares one reference:</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/jquery.js"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">head</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">title</span><span class="close-tag">&gt;</span>Web App<span class="open-tag">&lt;/</span><span class="tag">title</span><span class="close-tag">&gt;</span>
    <span class="code-tag">@@</span><span class="razor-expression"><span class="code-type">Assets</span>.Stylesheets.Render()</span>
<span class="open-tag">&lt;/</span><span class="tag">head</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">body</span><span class="close-tag">&gt;</span>
    <span class="code-tag">@@</span>RenderBody()
    <span class="code-tag">@@</span><span class="razor-expression"><span class="code-type">Assets</span>.Scripts.Render()</span>
<span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></code></pre>
<p>And then the content page adds some more:</p>
<pre><code><span class="code-tag">@@{</span>
    Layout = <span class="string">"~/Views/Shared/Layout.cshtml"</span>;
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/page.js"</span>);
    <span class="code-type">Assets</span>.Stylesheets.Reference(<span class="string">"Styles/page.css"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;</span><span class="tag">p</span><span class="close-tag">&gt;</span>My page<span class="open-tag">&lt;</span><span class="tag">/p</span><span class="close-tag">&gt;</span>
</code></pre>
<p>All the required assets get included into the final page output, in the location of the <code>Render</code> calls.</p>
<pre><code><span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">head</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">title</span><span class="close-tag">&gt;</span>Web App<span class="open-tag">&lt;/</span><span class="tag">title</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">link</span> <span class="attribute">href</span><span class="attribute-value">="/Styles/page.css?6df23ad2"</span> <span class="attribute">type</span><span class="attribute-value">="text/css"</span> <span class="attribute">rel</span><span class="attribute-value">="stylesheet"</span><span class="close-tag">/&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">head</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;</span><span class="tag">body</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">p</span><span class="close-tag">&gt;</span>My page<span class="open-tag">&lt;</span><span class="tag">/p</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">script</span> <span class="attribute">src</span><span class="attribute-value">="/Scripts/jquery.js?a4babad4b"</span> <span class="attribute">type</span><span class="attribute-value">="text/javascript"</span><span class="close-tag">&gt;</span><span class="open-tag">&lt;/</span><span class="tag">script</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">script</span> <span class="attribute">src</span><span class="attribute-value">="/Scripts/page.js?1b5f3ac80"</span> <span class="attribute">type</span><span class="attribute-value">="text/javascript"</span><span class="close-tag">&gt;</span><span class="open-tag">&lt;/</span><span class="tag">script</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></code></pre>

<h3>Referencing between files</h3>
<p>We've referenced both jquery.js and page.js. The order matters because page.js depends on jquery.js.
So let's make this explicit. In page.js, we can add a reference comment:</p>
<pre><code><span class="comment">/// &lt;reference path="jquery.js"/&gt;</span>
$(function() {
    ...
});</code></pre>
<p>
Cassette parses the reference comments and then inserts all the required assets into the page.
Therefore we can delete the explicit jQuery reference from the page.
</p>
<pre><code><span class="code-tag">@@{</span>
    <span style="text-decoration: line-through"><span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/jquery.js"</span>);</span>
    <span class="code-type">Assets</span>.Scripts.Reference(<span class="string">"Scripts/page.js"</span>);
    <span class="code-type">Assets</span>.Stylesheets.Reference(<span class="string">"Styles/page.css"</span>);
<span class="code-tag">}</span>
<span class="open-tag">&lt;!</span><span class="tag">DOCTYPE</span> <span class="attribute">html</span><span class="close-tag">&gt;</span>
    <span class="open-tag">&lt;</span><span class="tag">html</span><span class="close-tag">&gt;</span>
...</code></pre>
<p>An added benefit of using reference comments is that Visual Studio will provide
IntelliSense for the functions and objects exposed by the referenced files.</p>

<h3>Enough with the basics!</h3>
<p>
This introduction has only scratched the surface of what Cassette can do. Including each script
individually into a page is bad for production performance. Let's learn how to configure Cassette
to concatenate related scripts...
</p>
<p><a class="action" href="@Url.DocumentationUrl("getting-started/combine-assets-into-modules")">Read about combining assets &#187;</a></p>

<h3>Questions?</h3>
<p>Please visit the <a href="http://groups.google.com/group/cassette">Cassette Google Group</a> to ask for help.</p>
