<h1>Page locations</h1>

<p>
    A bundle has an optional <code>PageLocation</code> property.
    The <code>Bundle.Render</code> methods are overloaded to accept a page location argument.
    This is useful when some bundles need to be in the <code>&lt;head&gt;</code> of the page, 
    while others are just before <code>&lt;/body&gt;</code>.
</p>

<p>
    For example, given this configuration that assigns the <code>PageLocation</code> properties:
</p>

<pre><code>public class BundleConfiguration : IConfiguration&lt;BundleCollection&gt;
{
    public void Configure(BundleCollection bundles)
    {
        bundles.Add&lt;ScriptBundle&gt;(
            "scripts/modernizer.js",
            b => b.PageLocation = "head"
        );
        bundles.Add&lt;ScriptBundle&gt;(
            "scripts/jquery.js",
            b => b.PageLocation = "body"
        );
        bundles.Add&lt;ScriptBundle&gt;(
            "scripts/app",
            b => b.PageLocation = "body"
        );
    }
}</code></pre>

<p>
    Then in a view we can render the scripts for each location.
</p>

<pre><code>@@{
    Bundles.Reference("scripts/modernizer.js");
    Bundles.Reference("scripts/app");
}
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    ...
    @@Bundles.RenderScripts("head");
  &lt;/head&gt;
  &lt;body&gt;
    ...
    @@Bundles.RenderScripts("body");
  &lt;/body&gt;
&lt;html&gt;</code></pre>