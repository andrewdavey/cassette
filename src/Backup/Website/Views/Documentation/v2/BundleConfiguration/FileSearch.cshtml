@{
    ViewBag.Title = "Cassette | File Search";
    ViewBag.Description = "How to define the types of files Cassette will bundle.";
}

<h1>File search</h1>

<p>
    To when adding bundles to a <code>BundleCollection</code>, you can control which files are added.
    The <code>Add</code> methods are overloaded to accept an <code>IFileSearch</code> object.
</p>

<p>Here's an example that excludes some files:</p>

<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">CassetteConfiguration</span> : <span class="code-type">IConfiguration</span>&lt;<span class="code-type">BundleCollection</span>&gt;
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">BundleCollection</span> bundles)
    {
        bundles.AddPerSubDirectory&lt;<span class="code-type">ScriptBundle</span>&gt;(<span class="string">"Scripts"</span>, <span class="keyword">new</span> <span class="code-type">FileSearch</span>
        {
            Pattern = <span class="string">"*.js"</span>,
            Exclude = <span class="keyword">new</span> <span class="code-type">Regex</span>(<span class="string">"ignore-me\\.js$"</span>)
        });
    }
}</code></pre>

<h2>Default file searches</h2>
<p>There are default file searches defined for each type of bundle. A <code>FileSearch</code> object has three properties:</p>
<ul>
    <li><code>Pattern</code> - A string that matches file names. For example, <code>"*.js"</code></li>
    <li><code>SearchOption</code> - A <code>System.IO.SearchOption</code> that defines if the search should be restricted to the top level of a directory, or include all sub-directories as well. The default is to search all sub-directories.</li>
    <li><code>Exclude</code> - An optional <code>Regex</code> used to test if a found file path should be excluded.</li>
</ul>

<h3>Script bundles</h3>
<table>
    <tr>
        <th>File search property</th><th>Default</th>
    </tr>
    <tr>
        <td>Pattern</td><td><code>"*.js"</code></td>
    </tr>
    <tr>
        <td>SearchOption</td><td><code>SearchOption.AllDirectories</code></td>
    </tr>
    <tr>
        <td>Exclude</td><td><code>new Regex("-vsdoc.js$")</code></td>
    </tr>
</table>

<p>
    <strong>Extra magic:</strong> When any <code>{file}.js</code> and <code>{file}.min.js</code> are found, 
    Cassette will ignore the <code>file.min.js</code> and only include <code>file.js</code>.
    Likewise, given both <code>{file}.debug.js</code> and <code>{file}.js</code>, Cassette will pick <code>{file}.debug.js</code>.
</p>

<p>The <code>Cassette.CoffeeScript</code> plug-in modifies the default pattern to include <code>*.coffee</code> files.</p>

<h3>Stylesheet bundles</h3>
<table>
    <tr>
        <th>File search property</th><th>Default</th>
    </tr>
    <tr>
        <td>Pattern</td><td><code>"*.css"</code></td>
    </tr>
    <tr>
        <td>SearchOption</td><td><code>SearchOption.AllDirectories</code></td>
    </tr>
    <tr>
        <td>Exclude</td><td><code>null</code></td>
    </tr>
</table>

<p>The <code>Cassette.Less</code> plug-in modifies the default pattern include <code>*.less</code> files.</p>
<p>The <code>Cassette.Sass</code> plug-in modifies the default pattern include <code>*.sass</code> and <code>*.scss</code> files.</p>

<h3>HTML template bundles</h3>
<table>
    <tr>
        <th>File search property</th><th>Default</th>
    </tr>
    <tr>
        <td>Pattern</td><td><code>"*.htm;*.html"</code></td>
    </tr>
    <tr>
        <td>SearchOption</td><td><code>SearchOption.AllDirectories</code></td>
    </tr>
    <tr>
        <td>Exclude</td><td><code>null</code></td>
    </tr>
</table>

<p>The <code>Cassette.Hogan</code> plug-in modifies the default pattern to include <code>*.mustache</code>, <code>*.jst</code> and <code>*.tmpl</code> files.</p>

<h2>Globally modifying the file searches</h2>
<p>To globally modify the default file searches, define a public class that implements <code>IFileSearchModifier&lt;T&gt;</code>.</p>
<p>For example:</p>
<pre><code>public class ModifyScriptFileSearch : IFileSearchModifier&lt;ScriptBundle&gt;
{
    public void Modify(FileSearch fileSearch)
    {
        fileSearch.SearchOption = SearchOption.TopDirectoryOnly;
    }
}</code></pre>
<p>Cassette will find this class and use it to modify the default file search of the particular bundle type.</p>
