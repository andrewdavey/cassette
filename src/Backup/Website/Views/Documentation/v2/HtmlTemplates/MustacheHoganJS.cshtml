@{
    ViewBag.Title = "Cassette | Mustache Template Compilation";
}

<h1>Mustache Template Compilation</h1>

<p>Cassette enables you to pre-compile <a href="http://mustache.github.com/mustache.5.html">Mustache</a> templates into JavaScript on the server-side
 and render them using <a href="http://twitter.github.com/hogan.js/">Hogan.js</a>. The compiled templates are cached and served to the browser as 
 a regular script. This also provides all the benefits of Cassette's bundle versioning and caching.</p>

<p>The compiled template functions are loaded into a configurable global variable.</p>

<h2>Install Cassette.Hogan</h2>
<p>Install the Cassette.Hogan package from nuget</p>
<pre><code>Install-Package Cassette.Hogan</code></pre>

<h2>Configuration</h2>
<p>
    The plug-in will automatically configure the default HTML template pipeline
    to be the <code>HoganPipeline</code>.
    So any <code>HtmlTemplateBundle</code>s that you add will use the <code>HoganPipeline</code>.
</p>
<p>To configure the global JavaScript variable that will store the templates, add the following:</p>
<pre><code><span class="keyword">using</span> Cassette;
<span class="keyword">using</span> Cassette.Hogan;

<span class="keyword">public</span> <span class="keyword">class</span> <span class="code-type">HoganConfig</span> : <span class="code-type">IConfiguration</span>&lt;<span class="code-type">HoganSettings</span>&gt;
{
    <span class="keyword">public</span> <span class="keyword">void</span> Configure(<span class="code-type">HoganSettings</span> settings)
    {
        settings.JavaScriptVariableName = <span class="string">"myvar"</span>; <span class="comment">// The default is "JST"</span>
    }
}</code></pre>

<h2>Using in pages</h2>
<p>In a view page, reference your templates just like any other bundle:</p>
<pre><code><span class="code-tag">@@{</span>
    <span class="code-type">Bundles</span>.Reference(<span class="string">"HtmlTemplates"</span>);
<span class="code-tag">}</span></code></pre>
<p>Also, tell Cassette where to render the HTML required to include the templates:</p>
<pre><code>...
  <span class="code-tag">@@</span><span class="razor-expression"><span class="code-type">Bundles</span>.RenderHtmlTemplates()</span></code>
  <span class="open-tag">&lt;/</span><span class="tag">body</span><span class="close-tag">&gt;</span>
<span class="open-tag">&lt;/</span><span class="tag">html</span><span class="close-tag">&gt;</span></pre>

<p>Now when the page runs, instead of embedding the template sources into the page, a single script include is generated:</p>
<pre><code><span class="open-tag">&lt;</span><span class="tag">script</span> <span class="attribute">src</span><span class="attribute-value">="/cassette.axd/htmltemplate/HtmlTemplates_7d879cec"</span> <span class="attribute">type</span><span class="attribute-value">="text/javascript"</span><span class="close-tag">&gt;</span><span class="open-tag">&lt;/</span><span class="tag">script</span><span class="close-tag">&gt;</span></code></pre>

<p>This script will return the templates compiled into JavaScript. Like all Cassette bundles, it is versioned and cached aggresively. 
So a browser only needs to download it once.</p>

<p>Templates will be accessible via the global object. To render a template using Hogan.js using the render method:</p>

<pre><code>var myHtml = templates['myTemplate'].render(myData);</code></pre>
